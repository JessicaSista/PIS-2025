name: CI/CD - Azure App Service Test (Develop)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.304"

      - id: find-server
        name: Find Server folder
        run: |
          server_dir=$(find "$GITHUB_WORKSPACE" -type d -name Server -print -quit)
          if [ -z "$server_dir" ]; then
            echo "ERROR: 'Server' folder not found"
            exit 1
          fi
          rel=${server_dir#"$GITHUB_WORKSPACE"/}
          echo "server_path=$rel" >> $GITHUB_OUTPUT

      - name: Show found server path
        run: |
          echo "SERVER_PATH='${{ steps.find-server.outputs.server_path }}'"
          ls -la "${{ github.workspace }}/${{ steps.find-server.outputs.server_path }}"

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ${{ github.workspace }}/${{ steps.find-server.outputs.server_path }}

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{ github.workspace }}/${{ steps.find-server.outputs.server_path }}

      #- name: Run tests
      # run: dotnet test --no-build --verbosity normal
      #working-directory: ${{ github.workspace }}/tests
      # continue-on-error: false # Fail workflow si los tests fallan

      - name: Publish
        run: dotnet publish --configuration Release --no-build --output ./publish
        working-directory: ${{ github.workspace }}/${{ steps.find-server.outputs.server_path }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: web-smartplatform-dev
          package: ${{ github.workspace }}/${{ steps.find-server.outputs.server_path }}/publish

      - name: Update database (EF Core migrations)
        run: |
          dotnet tool install --global dotnet-ef
          export PATH="$PATH:$HOME/.dotnet/tools"
          dotnet ef database update \
            --connection "${{ secrets.AZURE_SQL_CONN_DEV }}" \
            --project ${{ github.workspace }}/${{ steps.find-server.outputs.server_path }}/OmniMonitor.Server.csproj \
            --startup-project ${{ github.workspace }}/${{ steps.find-server.outputs.server_path }}/OmniMonitor.Server.csproj
